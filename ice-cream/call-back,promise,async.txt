//CALLBACK HELLlet stocks = {
  Fruits : ["strawberry", "grapes", "banana", "apple"],
  liquid : ["water", "ice"],
  holder : ["cone", "cup", "stick"],
  toppings : ["chocolate", "peanuts"],
};

let is_shop_open = true

let order = (time,work) => {

  return new Promise((resolve,reject)=>{
    if (is_shop_open){

      setTimeout(()=>{
        resolve(work())
      },time)

      
    }
    else{
      reject(console.log("our shop is closed"))
    }
  })
}

order(2000,()=>console.log(`${stocks.Fruits[0]} selected..`))

.then(()=>{
  return order(0,()=>console.log("production has started..."))
})

.then(()=>{
  return order(2000,()=>console.log("fruit is being chopped.."))
})

.then(()=>{
  return order(1000,()=>console.log("water and ie were added"))
})

.then(()=>{
  return order(1000,()=>console.log("start the machine.."))
})

.then(()=>{
  return order(2000,()=>console.log(`${stocks.holder[0]} was selected`))
})

.then(()=>{
  return order(3000,()=>console.log(`${stocks.toppings[0]} was selected...`))
})

.then(()=>{
  return order(2000,()=>console.log("ice cream has been served !!!"))
})


.catch(()=>{
  console.log("customer left")
})

.finally(()=>{
  console.log("day ended")
})
let stocks = {
  Fruits : ["strawberry", "grapes", "banana", "apple"],
  liquid : ["water", "ice"],
  holder : ["cone", "cup", "stick"],
  toppings : ["chocolate", "peanuts"],
};

let order = (fruit_name,call_production) => {
  setTimeout(()=>{
    console.log(`${stocks.Fruits[fruit_name]} was selected..`);
    call_production()
  },2000)
  
}
let production = () => {
  setTimeout(()=>{
    console.log("production has started");

    setTimeout(()=>{
      console.log("fruit is being cut");

      setTimeout(()=>{
        console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} were added`);

        setTimeout(()=>{
          console.log("the machine has been started");

          setTimeout(()=>{
            console.log(`${stocks.holder[0]} was selected...`);

            setTimeout(()=>{
              console.log(`${stocks.toppings[0]} was selected..`);

              setTimeout(()=>{
                console.log("Ice cream has been served!!!!!!");

              },2000)
            },3000)
          },2000)
        },1000)
      },1000)
    },2000)
  },0)
}

order(0,production)


------------------------------------------------------------------------------------------------------------------------------------

//PROMISE CHAINING
let stocks = {
  Fruits : ["strawberry", "grapes", "banana", "apple"],
  liquid : ["water", "ice"],
  holder : ["cone", "cup", "stick"],
  toppings : ["chocolate", "peanuts"],
};

let is_shop_open = true

let order = (time,work) => {

  return new Promise((resolve,reject)=>{
    if (is_shop_open){

      setTimeout(()=>{
        resolve(work())
      },time)

      
    }
    else{
      reject(console.log("our shop is closed"))
    }
  })
}

order(2000,()=>console.log(`${stocks.Fruits[0]} selected..`))

.then(()=>{
  return order(0,()=>console.log("production has started..."))
})

.then(()=>{
  return order(2000,()=>console.log("fruit is being chopped.."))
})

.then(()=>{
  return order(1000,()=>console.log("water and ie were added"))
})

.then(()=>{
  return order(1000,()=>console.log("start the machine.."))
})

.then(()=>{
  return order(2000,()=>console.log(`${stocks.holder[0]} was selected`))
})

.then(()=>{
  return order(3000,()=>console.log(`${stocks.toppings[0]} was selected...`))
})

.then(()=>{
  return order(2000,()=>console.log("ice cream has been served !!!"))
})


.catch(()=>{
  console.log("customer left")
})

.finally(()=>{
  console.log("day ended")
})

--------------------------------------------------------------------------------------------------------------------------------------

//ASYNC AWAIT METHOD
let stocks = {
  Fruits : ["strawberry", "grapes", "banana", "apple"],
  liquid : ["water", "ice"],
  holder : ["cone", "cup", "stick"],
  toppings : ["chocolate", "peanuts"],
};

let is_shop_open = true

function time(ms){
  return new Promise((resolve,reject)=>{
    if (is_shop_open){
      setTimeout(resolve,ms)
    }
    else{
      reject(console.log("shop ks closed"))
    }
  })
}

async function kitchen(){
  try{
    await time(2000);
    console.log(`${stocks.Fruits[0]} was selected...`)

    await time(0);
    console.log("start the production")

    await time(2000);
    console.log("fruit is being cut")

    await time(1000);
    console.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} were added`)

    await time(1000);
    console.log("starting the machine...")

    await time(2000);
    console.log(`ice cream placed on ${stocks.holder[0]}`)

    await time(3000);
    console.log(`${stocks.toppings[0]} was added...`)

    await time(2000);
    console.log("ice cream has been served !!!!")
  }
  catch(error){
    console.log("customer left",error)
  }
  finally{
    console.log("day ended")
  }
}

kitchen()



